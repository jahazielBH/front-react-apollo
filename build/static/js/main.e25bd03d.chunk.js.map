{"version":3,"sources":["components/CreateLink.js","constants.js","components/Header.js","utils.js","components/Link.js","components/LinkList.js","components/Login.js","components/App.js","serviceWorker.js","index.js"],"names":["CREATE_LINK_MUTATION","gql","CreateLink","history","useHistory","useState","description","url","formState","setFormState","useMutation","variables","onCompleted","push","createLink","onSubmit","e","preventDefault","className","value","onChange","target","type","placeholder","AUTH_TOKEN","Header","authToken","localStorage","getItem","to","onClick","removeItem","timeDifferenceForDate","date","current","previous","milliSecondsPerMinute","milliSecondsPerHour","milliSecondsPerDay","milliSecondsPerMonth","milliSecondsPerYear","elapsed","Math","round","timeDifference","Date","getTime","VOTE_MUTATION","Link","props","link","orderBy","createdAt","linkId","id","update","cache","vote","data","updatedLinks","readQuery","query","FEED_QUERY","take","skip","feed","links","map","feedLink","votes","writeQuery","index","style","cursor","length","postedBy","username","NEW_LINKS_SUBSCRIPTION","NEW_VOTES_SUBSCRIPTION","getLinksToRender","isNewPage","rankedLinks","slice","sort","l1","l2","getQueryVariables","page","LinkList","location","pathname","includes","pageIndexParams","split","parseInt","pageIndex","useQuery","loading","error","subscribeToMore","document","updateQuery","prev","subscriptionData","newLink","find","Object","assign","count","__typename","JSON","stringify","nextPage","SIGNUP_MUTATION","LOGIN_MUTATION","Login","login","email","password","tokenAuth","console","log","setItem","token","signup","App","exact","path","component","Boolean","window","hostname","match","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","concat","InMemoryCache","ReactDOM","render","ApolloProvider","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e25bd03d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useMutation, gql } from '@apollo/client';\nimport { useHistory } from 'react-router';\n\nconst CREATE_LINK_MUTATION = gql`\n  mutation CreateLink(\n    $description: String!\n    $url: String!\n  ) {\n    createLink(description: $description, url: $url) {\n      id\n      url\n      description\n    }\n  }\n`;\n\nconst CreateLink = () => {\n\n  const history = useHistory();\n\n  const [formState, setFormState] = useState({\n    description: '',\n    url: ''\n  });\n\n  const [createLink] = useMutation(CREATE_LINK_MUTATION, {\n    variables: {\n      description: formState.description,\n      url: formState.url\n    },\n    onCompleted: () => history.push('/')\n\n  });\n\n  return (\n    <div>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          createLink();\n        }}\n      >\n        <div className=\"flex flex-column mt3\">\n          <input\n            className=\"mb2\"\n            value={formState.description}\n            onChange={(e) =>\n              setFormState({\n                ...formState,\n                description: e.target.value\n              })\n            }\n            type=\"text\"\n            placeholder=\"A description for the link\"\n          />\n          <input\n            className=\"mb2\"\n            value={formState.url}\n            onChange={(e) =>\n              setFormState({\n                ...formState,\n                url: e.target.value\n              })\n            }\n            type=\"text\"\n            placeholder=\"The URL for the link\"\n          />\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n};\n\nexport default CreateLink;","export const AUTH_TOKEN = 'auth-token';\nexport const LINKS_PER_PAGE = 5;","import React from 'react';\nimport { useHistory } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { AUTH_TOKEN } from '../constants';\n\nconst Header = () => {\n  const history = useHistory();\n  const authToken = localStorage.getItem(AUTH_TOKEN);\n  return (\n    <div className=\"flex pa1 justify-between nowrap orange\">\n      <div className=\"flex flex-fixed black\">\n        <div className=\"fw7 mr1\">Hacker News</div>\n        <Link to=\"/\" className=\"ml1 no-underline black\">\n          new\n        </Link>\n        <div className=\"ml1\">|</div>\n        <Link to=\"/top\" className=\"ml1 no-underline black\">\n          top\n        </Link>\n        <div className=\"ml1\">|</div>\n        <Link\n          to=\"/search\"\n          className=\"ml1 no-underline black\"\n        >\n          search\n        </Link>\n        {authToken && (\n          <div className=\"flex\">\n            <div className=\"ml1\">|</div>\n            <Link\n              to=\"/create\"\n              className=\"ml1 no-underline black\"\n            >\n              submit\n            </Link>\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-fixed\">\n        {authToken ? (\n          <div\n            className=\"ml1 pointer black\"\n            onClick={() => {\n              localStorage.removeItem(AUTH_TOKEN);\n              history.push(`/`);\n            }}\n          >\n            logout\n          </div>\n        ) : (\n          <Link\n            to=\"/login\"\n            className=\"ml1 no-underline black\"\n          >\n            login\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","function timeDifference(current, previous) {\n    const milliSecondsPerMinute = 60 * 1000\n    const milliSecondsPerHour = milliSecondsPerMinute * 60\n    const milliSecondsPerDay = milliSecondsPerHour * 24\n    const milliSecondsPerMonth = milliSecondsPerDay * 30\n    const milliSecondsPerYear = milliSecondsPerDay * 365\n\n    const elapsed = current - previous\n\n    if (elapsed < milliSecondsPerMinute / 3) {\n        return 'just now'\n    }\n\n    if (elapsed < milliSecondsPerMinute) {\n        return 'less than 1 min ago'\n    } else if (elapsed < milliSecondsPerHour) {\n        return Math.round(elapsed / milliSecondsPerMinute) + ' min ago'\n    } else if (elapsed < milliSecondsPerDay) {\n        return Math.round(elapsed / milliSecondsPerHour) + ' h ago'\n    } else if (elapsed < milliSecondsPerMonth) {\n        return Math.round(elapsed / milliSecondsPerDay) + ' days ago'\n    } else if (elapsed < milliSecondsPerYear) {\n        return Math.round(elapsed / milliSecondsPerMonth) + ' mo ago'\n    } else {\n        return Math.round(elapsed / milliSecondsPerYear) + ' years ago'\n    }\n}\n\nexport function timeDifferenceForDate(date) {\n    const now = new Date().getTime()\n    const updated = new Date(date).getTime()\n    return timeDifference(now, updated)\n}","import React from 'react';\nimport { AUTH_TOKEN, LINKS_PER_PAGE } from '../constants';\nimport { timeDifferenceForDate } from '../utils';\nimport { useMutation, gql } from '@apollo/client';\nimport { FEED_QUERY } from './LinkList';\n\nconst VOTE_MUTATION = gql`\n  mutation CreateVote($linkId: ID!) {\n    createVote(linkId: $linkId) {\n      link{\n        id\n        votes {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n      }\n      user{\n        id\n      }\n    }\n  }\n`;\n\nconst Link = (props) => {\n  const { link } = props;\n  const authToken = localStorage.getItem(AUTH_TOKEN);\n\n  const take = LINKS_PER_PAGE;\n  const skip = 0;\n  const orderBy = { createdAt: 'desc' };\n\n  const [vote] = useMutation(VOTE_MUTATION, {\n    variables: {\n      linkId: link.id\n    },\n    update(cache, { data: { vote } }) {\n      const { feed } = cache.readQuery({\n        query: FEED_QUERY,\n        variables: {\n          take,\n          skip,\n          orderBy\n        }\n      });\n\n      const updatedLinks = feed.links.map((feedLink) => {\n        if (feedLink.id === link.id) {\n          return {\n            ...feedLink,\n            votes: [...feedLink.votes, vote]\n          };\n        }\n        return feedLink;\n      });\n\n      cache.writeQuery({\n        query: FEED_QUERY,\n        data: {\n          feed: {\n            links: updatedLinks\n          }\n        },\n        variables: {\n          take,\n          skip,\n          orderBy\n        }\n      });\n    }\n  });\n  \n\n  return (\n    <div className=\"flex mt2 items-start\">\n      <div className=\"flex items-center\">\n        <span className=\"gray\">{props.index + 1}.</span>\n        {authToken && (\n          <div\n            className=\"ml1 gray f11\"\n            style={{ cursor: 'pointer' }}\n            onClick={vote}\n          >\n            ▲\n          </div>\n        )}\n      </div>\n      <div className=\"ml1\">\n        <div>\n          {link.description} ({link.url})\n        </div>\n        {authToken && (\n          <div className=\"f6 lh-copy gray\">\n            {link.votes.length} votes | by{' '}\n            {link.postedBy ? link.postedBy.username : 'Unknown'}{' '}\n            {timeDifferenceForDate(link.createdAt)}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Link;","import React from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { useHistory } from 'react-router';\nimport { LINKS_PER_PAGE } from '../constants';\nimport Link from './Link';\n\nexport const FEED_QUERY = gql`\n  query FeedQuery(\n    $take: Int\n    $skip: Int\n    $orderBy: LinkOrderByInput\n  ) {\n    feed(take: $take, skip: $skip, orderBy: $orderBy) {\n      id\n      links {\n        id\n        url\n        description\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n        createdAt\n      }\n      count\n    }\n  }\n`;\n\nconst NEW_LINKS_SUBSCRIPTION = gql`\n  subscription {\n    newLink {\n      id\n      url\n      description\n      postedBy {\n        id\n        name\n      }\n      votes {\n        id\n        user {\n          id\n        }\n      }\n      createdAt\n    }\n  }\n`;\n\nconst NEW_VOTES_SUBSCRIPTION = gql`\n  subscription {\n    newVote {\n      id\n      link {\n        id\n        url\n        description\n        postedBy {\n          id\n          name\n        }\n        votes {\n          id\n          user {\n            id\n          }\n        }\n        createdAt\n      }\n      user {\n        id\n      }\n    }\n  }\n`;\n\nconst getLinksToRender = (isNewPage, data) => {\n  if (isNewPage) {\n    return data.feed.links;\n  }\n  const rankedLinks = data.feed.links.slice();\n  rankedLinks.sort(\n    (l1, l2) => l2.votes.length - l1.votes.length\n  );\n  return rankedLinks;\n};\n\nconst getQueryVariables = (isNewPage, page) => {\n  const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0;\n  const take = isNewPage ? LINKS_PER_PAGE : 100;\n  const orderBy = { createdAt: 'desc' };\n  return { take, skip, orderBy };\n};\n\nconst LinkList = () => {\n  const history = useHistory();\n  const isNewPage = history.location.pathname.includes(\n    'new'\n  );\n  const pageIndexParams = history.location.pathname.split(\n    '/'\n  );\n  const page = parseInt(\n    pageIndexParams[pageIndexParams.length - 1]\n  );\n\n  const pageIndex = page ? (page - 1) * LINKS_PER_PAGE : 0;\n\n  const {\n    data,\n    loading,\n    error,\n    subscribeToMore\n  } = useQuery(FEED_QUERY, {\n    variables: getQueryVariables(isNewPage, page)\n  });\n\n  subscribeToMore({\n    document: NEW_LINKS_SUBSCRIPTION,\n    updateQuery: (prev, { subscriptionData }) => {\n      if (!subscriptionData.data) return prev;\n      const newLink = subscriptionData.data.newLink;\n      const exists = prev.feed.links.find(\n        ({ id }) => id === newLink.id\n      );\n      if (exists) return prev;\n\n      return Object.assign({}, prev, {\n        feed: {\n          links: [newLink, ...prev.feed.links],\n          count: prev.feed.links.length + 1,\n          __typename: prev.feed.__typename\n        }\n      });\n    }\n  });\n\n  subscribeToMore({\n    document: NEW_VOTES_SUBSCRIPTION\n  });\n\n  return (\n    <>\n      {loading && <p>Loading...</p>}\n      {error && <pre>{JSON.stringify(error, null, 2)}</pre>}\n      {data && (\n        <>\n          {getLinksToRender(isNewPage, data).map(\n            (link, index) => (\n              <Link\n                key={link.id}\n                link={link}\n                index={index + pageIndex}\n              />\n            )\n          )}\n          {isNewPage && (\n            <div className=\"flex ml4 mv3 gray\">\n              <div\n                className=\"pointer mr2\"\n                onClick={() => {\n                  if (page > 1) {\n                    history.push(`/new/${page - 1}`);\n                  }\n                }}\n              >\n                Previous\n              </div>\n              <div\n                className=\"pointer\"\n                onClick={() => {\n                  if (\n                    page <=\n                    data.feed.count / LINKS_PER_PAGE\n                  ) {\n                    const nextPage = page + 1;\n                    history.push(`/new/${nextPage}`);\n                  }\n                }}\n              >\n                Next\n              </div>\n            </div>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default LinkList;","import React, { useState } from 'react';\nimport { useMutation, gql } from '@apollo/client';\nimport { useHistory } from 'react-router';\nimport { AUTH_TOKEN } from '../constants';\n\nconst SIGNUP_MUTATION = gql`\n  mutation CreateUser($email: String!, $password: String!, $username: String!) {\n    createUser(\n      email: $email,\n      password: $password,\n      username: $username\n    ){\n      user{\n        email\n        username\n      }\n    }\n  }\n`;\n\nconst LOGIN_MUTATION = gql`\n  mutation TokenAuth(\n    $username: String!,\n    $password: String!\n  ) {\n    tokenAuth(username: $username, password: $password) {\n      token\n    }\n  }\n`;\n\nconst Login = () => {\n  const history = useHistory();\n  const [formState, setFormState] = useState({\n    login: true,\n    email: '',\n    password: '',\n    username: ''\n  });\n\n  const [login] = useMutation(LOGIN_MUTATION, {\n    variables: {\n      username: formState.username,\n      password: formState.password\n    },\n    onCompleted: ({ tokenAuth }) => {\n      console.log(tokenAuth);\n      localStorage.setItem(AUTH_TOKEN, tokenAuth.token);\n      history.push('/');\n    }\n  });\n\n  const [signup] = useMutation(SIGNUP_MUTATION, {\n    variables: {\n      username: formState.username,\n      email: formState.email,\n      password: formState.password\n    },\n    onCompleted: ({ signup }) => {\n      history.push('/');\n    }\n  });\n\n  return (\n    <div>\n      <h4 className=\"mv3\">\n        {formState.login ? 'Login' : 'Sign Up'}\n      </h4>\n      <div className=\"flex flex-column\">\n        {!formState.login && (\n          <input\n          value={formState.email}\n          onChange={(e) =>\n            setFormState({\n              ...formState,\n              email: e.target.value\n            })\n          }\n          type=\"text\"\n          placeholder=\"Your email address\"\n        />\n        )}\n        <input\n            value={formState.username}\n            onChange={(e) =>\n              setFormState({\n                ...formState,\n                username: e.target.value\n              })\n            }\n            type=\"text\"\n            placeholder=\"Your username\"\n          />\n        <input\n          value={formState.password}\n          onChange={(e) =>\n            setFormState({\n              ...formState,\n              password: e.target.value\n            })\n          }\n          type=\"password\"\n          placeholder=\"Choose a safe password\"\n        />\n      </div>\n      <div className=\"flex mt3\">\n        <button\n          className=\"pointer mr2 button\"\n          onClick={formState.login ? login : signup}\n        >\n          {formState.login ? 'login' : 'create account'}\n        </button>\n        <button\n          className=\"pointer button\"\n          onClick={(e) =>\n            setFormState({\n              ...formState,\n              login: !formState.login\n            })\n          }\n        >\n          {formState.login\n            ? 'need to create an account?'\n            : 'already have an account?'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;","import React from 'react';\nimport CreateLink from './CreateLink';\nimport Header from './Header';\nimport LinkList from './LinkList';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './Login';\n\nconst App = () => {\n  return (\n    <div className=\"center w85\">\n      <Header />\n      <div className=\"ph3 pv1 background-gray\">\n        <Switch>\n          <Route exact path=\"/\" component={LinkList} />\n          <Route\n            exact\n            path=\"/create\"\n            component={CreateLink}\n          />\n          <Route exact path=\"/login\" component={Login} />\n        </Switch>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","const isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { setContext } from '@apollo/client/link/context';\nimport { AUTH_TOKEN } from './constants';\n\n// 1\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache\n} from '@apollo/client';\n\n// 2\nconst httpLink = createHttpLink({\n  uri: 'http://35.232.232.192:8091/graphql/'\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(AUTH_TOKEN);\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  };\n});\n\n// 3\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\n// 4\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();"],"sourceRoot":""}